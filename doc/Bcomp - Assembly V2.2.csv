Binary representiation,,,,,,,,Index,Menmonic,Name,Argument 1,Argument 2,Description,Micro instructions
,,,,,,,,0,NOP,No operation,-,-,The computer does nothing,-
,,,,,,,,1,STA,Set RA,The value,,Copies RSYS to RA,
,,,,,,,,2,STB,Set RB,The value,,Copies RSYS to RB,
,,,,,,,,3,STC,Set RC,The value,,Copies RSYS to RC,
,,,,,,,,4,STX,Set RX,The value,,Copies RSYS to RX,
,,,,,,,,5,STY,Set RY,The value,,Copies RSYS to RY,
,,,,,,,,6,STR,Set RRADR,The value,,Copies RSYS to RRADR,
,,,,,,,,7,STW,Set RWADR,The value,,Copies RSYS to RWADR,
,,,,,,,,8,MOV,Move value in reg,Reg. index 1,Reg. index 2,Copies R[a1] to R[a2],
,,,,,,,,9,ADD,Add,Reg. index,-,Adds RA and RB together and stores the result to R[a1],
,,,,,,,,10,INC,Increment,Reg. index,The value,Increments R[a1] by a2 and stores the result ot R[a1],
,,,,,,,,11,SUB,Subtract,Reg. index,-,Subtracts RA and RB together and stores the result to RA,
,,,,,,,,12,DEC,Decrement,Reg. index,The value,Decrements R[a1] by a2 and stores the result ot R[a1],
,,,,,,,,13,BOR,Bitwise OR,Reg. index,-,Outputs the result of the bitwise OR operation on RA and RB,
,,,,,,,,14,SET,Set,The value,,Outputs the bitwise OR of RA and RSYS to RC,
,,,,,,,,15,AND,Bitwise AND,Reg. index,-,Outputs the result of the bitwise AND operation on RA and RB to R[a1],
,,,,,,,,16,MSK,Mask,The value,,Outputs the bitwise AND of RA and  RSYS to RC,
,,,,,,,,17,XOR,Bitwise XOR,Reg. index,-,Outputs the result of the bitwise XOR operation on RA and RB to R[a1],
,,,,,,,,18,ENC,Encrypt,The value,,Outputs the bitwise XOR of RA and  RSYS to RC,
,,,,,,,,19,NOT,Bitwise NOT,Reg. index,-,Puts the inverted RA to R[a1],
,,,,,,,,20,SHR,Right shift,Reg. index,-,Outputs RA shifted to the right by 1 bit (divided by 2) to R[a1],
,,,,,,,,21,SHL,Left shift,Reg. index,-,Outputs RA shifted to the left by 1 bit (multiplied by 2) to R[a1],
,,,,,,,,22,CMP,Compare,Reg. index 1,Reg. index 2,"Compares R[a1] with R[a2] and sets RC to 0: =, 1: <, 2: >",
,,,,,,,,23,FLG,Load flags,Reg. index,-,Loads the value from the flags register to R[a1],
,,,,,,,,24,LDA,Load,Reg. index,-,Loads the value from memory to R[a1],
,,,,,,,,25,SVV,Save value,The value,,Stores RSYS to memory,
,,,,,,,,26,SVR,Save register,Reg. index,-,Stores R[a1] to memory,
,,,,,,,,27,CPY,Copy in memory,-,-,Copies the data from the read address to the write address in memory,
,,,,,,,,28,PSV,Push value,The value,,Pushes RSYS to the stack,
,,,,,,,,29,PSH,Push,Reg. index,-,Pushes R[a1] to the stack,
,,,,,,,,30,POP,Pop,Reg. index,-,pops the value from the stack to R[a1],
,,,,,,,,31,JMP,Jump,Line number,,Jumps to the given address,
,,,,,,,,32,JSR,Jump to subroutine,Line number,,"Jumps to the given address, and stores the source address to the call stack",
,,,,,,,,33,JIC,Jump if overflow,Line number,,"Jumps to the given address, if the overflow flag is on",
,,,,,,,,34,JIN,Jump if negative,Line number,,"Jumps to the given address, if the negative flag is on",
,,,,,,,,35,JIO,Jump if zero,Line number,,"Jumps to the given address, if the zero flag is on",
,,,,,,,,36,RTN,Return,-,-,Returns from the subroutine,
,,,,,,,,37,RTI,Return interrupt,-,-,Returns from the current interrupt,
,,,,,,,,38,OUT,Output to port,Reg. index,Port index,Puts R[a1] to port[a2],
,,,,,,,,39,INP,Input from port,Reg. index,Port index,Loads the value from port[a2]  to R[a1],
,,,,,,,,40,,,,,,
,,,,,,,,41,,,,,,
,,,,,,,,42,,,,,,
,,,,,,,,43,,,,,,
,,,,,,,,44,,,,,,
,,,,,,,,45,,,,,,
,,,,,,,,46,,,,,,
,,,,,,,,47,,,,,,
,,,,,,,,48,,,,,,
,,,,,,,,49,,,,,,
,,,,,,,,50,,,,,,
,,,,,,,,51,,,,,,
,,,,,,,,52,,,,,,
,,,,,,,,53,,,,,,
,,,,,,,,54,,,,,,
,,,,,,,,55,,,,,,
,,,,,,,,56,,,,,,
,,,,,,,,57,,,,,,
,,,,,,,,58,,,,,,
,,,,,,,,59,,,,,,
,,,,,,,,60,,,,,,
,,,,,,,,61,,,,,,
,,,,,,,,62,,,,,,
,,,,,,,,63,HLT,Halt,-,-,"Stops the clock, and execution",